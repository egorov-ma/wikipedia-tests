plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.11.2'
}

group = 'org.wikipedia'
version = '1.0'

def junitVersion = "5.9.3",
    selenideVersion = "6.13.0",
    appiumVersion = "8.3.0",
    restAssuredVersion = "5.3.0",
    ownerVersion = "1.0.12",
    allureVersion = "2.21.0",
    assertjVersion = "3.24.2",
    slf4jVersion = "2.0.7",
    commonsVersion = "2.11.0"


allure {
    adapter {
        aspectjVersion.set("1.9.21")

    }
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

repositories {
    mavenCentral()
}

compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation(
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "com.codeborne:selenide:$selenideVersion",
            "io.appium:java-client:$appiumVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.assertj:assertj-core:$assertjVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "commons-io:commons-io:$commonsVersion"
    )
    testRuntimeOnly(
            "org.slf4j:slf4j-simple:$slf4jVersion")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties())

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}
task remote_test(type: Test) {
    useJUnitPlatform {
        includeTags("remote")
    }
}

task local_test(type: Test) {
    useJUnitPlatform {
        includeTags("local")
    }
}